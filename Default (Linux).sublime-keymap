[

// this layout will only make sense on a Dvorak layout.

///////////////////////////////////////////////////
/////////////////// Moving around: ////////////////
///////////////////////////////////////////////////



//////////////////////////////////////////////
/////////////////// Up: //////////////////////
//////////////////////////////////////////////



{"keys": ["c"], "command": "move", "args": {"by": "lines", "forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["c"], "command": "move", "args": {"by": "lines", "forward": false, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "insert_snippet" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
    {"key": "last_command", "operator": "not_equal", "operand": "next_modification" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    {"key": "last_command", "operator": "not_equal", "operand": "" },
]
},

//////////////////////////////////////////////
/////////////////// Down: ////////////////////
//////////////////////////////////////////////

{"keys": ["t"], "command": "move", "args": {"by": "lines", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["t"], "command": "move", "args": {"by": "lines", "forward": true, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "insert_snippet" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
    {"key": "last_command", "operator": "not_equal", "operand": "next_modification" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    {"key": "last_command", "operator": "not_equal", "operand": "" },
]
},

//////////////////////////////////////////////
/////////////////// Right: ///////////////////
//////////////////////////////////////////////

{"keys": ["u"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["u"], "command": "move", "args": {"by": "characters", "forward": true, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "insert_snippet" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
    {"key": "last_command", "operator": "not_equal", "operand": "next_modification" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    {"key": "last_command", "operator": "not_equal", "operand": "" },
]
},

//////////////////////////////////////////////
/////////////////// Left: ////////////////////
//////////////////////////////////////////////

{"keys": ["o"], "command": "move", "args": {"by": "characters", "forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["o"], "command": "move", "args": {"by": "characters", "forward": false, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "insert_snippet" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
    {"key": "last_command", "operator": "not_equal", "operand": "next_modification" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    {"key": "last_command", "operator": "not_equal", "operand": "" },
]
},

//////////////////////////////////////////////
/////////////////// By words: ////////////////
//////////////////////////////////////////////

//////////////////////////////////////////////
/////////////////// Right word: //////////////
//////////////////////////////////////////////

{ "keys": ["r"], "command": "move", "args": {"by": "words", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},



{ "keys": ["r"], "command": "move", "args": {"by": "stops", "punct_end": true, "forward": true}, "context":
[
    {"key": "last_command", "operator": "equal", "operand": "insert_snippet" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{ "keys": ["ctrl+r"], "command": "move", "args": {"by": "subwords", "forward": true} },

{ "keys": ["ctrl+shift+r"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} },

{ "keys": ["r"], "command": "move", "args": {"by": "word_ends", "forward": true, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "insert_snippet" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
    {"key": "last_command", "operator": "not_equal", "operand": "next_modification" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    {"key": "last_command", "operator": "not_equal", "operand": "" },
]
},

//////////////////////////////////////////////
/////////////////// Left word: ///////////////
//////////////////////////////////////////////

{ "keys": ["ctrl+shift+g"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },


{ "keys": ["g"], "command": "move", "args": {"by": "word_ends","forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["g"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_to_paren_begin.sublime-macro"}, "context":

[
    // {"key": "last_command", "operator": "equal", "operand": "insert_snippet" },
    {"key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{ "keys": ["ctrl+g"], "command": "move", "args": {"by": "subword_ends", "forward": false} },

{ "keys": ["g"], "command": "move", "args": {"by": "word_ends", "forward": false, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "insert_snippet" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
    {"key": "last_command", "operator": "not_equal", "operand": "next_modification" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
]
},

{"keys": ["g"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/mark_word_backward_init.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
    {"key": "last_command", "operator": "equal", "operand": "find_under_expand" },
]
},

/////////////////////////////////////////////////////
/////////////////// Beginning of line: //////////////
/////////////////////////////////////////////////////

{"keys": ["a"], "command": "move_to", "args": { "to": "bol" }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

/////////////////////////////////////////////////////
/////////////////// BACKWARD BY LINE STOPS: /////////
/////////////////////////////////////////////////////

{"keys": ["a"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_backward.sublime-macro"}, "context":
[
    {"key": "following_text", "operator": "regex_contains", "operand": "^$|^\\S", "match_all": true},
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["a"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_backward_after_cut.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "num_selections", "operator": "equal", "operand": 1 },
    {"key": "text", "operator": "regex_contains", "operand": "\n"},
    {"key": "following_text", "operator": "regex_match", "operand": ".*\n$"},
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
]
},

/////////////////////////////////////////////////////
/////////////////// EOL of line: ////////////////////
/////////////////////////////////////////////////////

{"keys": ["s"], "command": "move_to", "args": {"to": "eol", "extend": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

/////////////////////////////////////////////////////
/////////////////// Forward by line stops: //////////
/////////////////////////////////////////////////////

{"keys": ["s"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_forward.sublime-macro"}, "context":
[
    {"key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["s"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_forward.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\S", "match_all": true},
    {"key": "num_selections", "operator": "equal", "operand": 1 },
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "last_command", "operator": "equal", "operand": "run_macro_file" },
]
},

{ "keys": ["s"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_forward_after_cut.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "num_selections", "operator": "equal", "operand": 1 },
    {"key": "text", "operator": "regex_contains", "operand": "\n"},
    {"key": "following_text", "operator": "regex_match", "operand": ".*\n$"},
    {"key": "last_command", "operator": "not_equal", "operand": "duplicate_line" },
    {"key": "last_command", "operator": "not_equal", "operand": "copy" },
]
},

{"keys": ["s"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_forward_and_center.sublime-macro"}, "context":
[
    {  "key": "selector","operator": "equal", "operand": "text.find-in-files"},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

/////////////////////////////////////////////////////
//////////////////// SEARCH AND REPLACE /////////////
/////////////////////////////////////////////////////

{"keys": ["m"], "command": "show_panel", "args": {"panel": "find", "reverse": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+m"], "command": "show_panel", "args": {"panel": "find", "reverse": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": [" "], "command": "show_panel", "args": {"panel": "find"}, "context":
[
    {"key": "last_command", "operator": "equal", "operand": "find_under_expand" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": [" "], "command": "show_panel", "args": {"panel": "find"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "last_command", "operator": "equal", "operand": "move" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["M"], "command": "show_panel", "args": {"panel": "replace"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": [" "], "command": "show_panel", "args": {"panel": "replace"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "text", "operator": "regex_contains", "operand": "\n"},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

// {"keys": ["ctrl+m"], "command": "show_panel", "args": {"panel": "find_in_files"}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },


{"keys": ["2"], "command": "show_panel", "args": {"panel": "find_in_files"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+enter"], "command": "replace_next", "context":
    [
        {"key": "panel_visible", "operator": "equal", "operand": true},
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["ctrl+shift+enter"], "command": "replace_all", "args": {"close_panel": true}, "context":
[
    {"key": "panel_has_focus"},
]
},

{"keys": ["enter"], "command": "find_all", "context":
    [
        {"key": "panel", "operand": "find_in_files"},
        {"key": "panel_has_focus"},
    ]
},


{"keys": ["ctrl+d"], "command": "toggle_regex", "context":
    [
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
        {"key": "setting.is_widget", "operator": "equal", "operand": true}
    ]
},

{"keys": ["ctrl+l"], "command": "toggle_case_sensitive", "context":
    [
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
        {"key": "setting.is_widget", "operator": "equal", "operand": true}
    ]
},

{"keys": ["ctrl+w"], "command": "toggle_whole_word", "context":
    [
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
        {"key": "setting.is_widget", "operator": "equal", "operand": true}
    ]
},



{"keys": ["enter"], "command": "insert_snippet", "args": {"contents": "\n${0:$SELECTION}\n"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key" : "panel_has_focus", "operator": "equal", "operand": false },
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
 },


{"keys": ["enter"], "command": "find_next", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true}
    ]
},









{"keys": ["enter"], "command": "find_under_expand_skip", "context":
    [
        {"key": "num_selections", "operator": "not_equal", "operand": 1 },
        {"key": "setting.block_caret", "operator": "equal", "operand": true}
    ]
},

{"keys": ["enter"], "command": "find_in_files_goto", "context":
    [
        {  "key": "selector","operator": "equal", "operand": "text.find-in-files"}
    ]
},

{"keys": ["shift+enter"], "command": "find_prev", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["shift+enter"], "command": "jump_back", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "num_selections", "operator": "not_equal", "operand": 1 },
    ]
},

/////////////////////////////////////////////////////
/////////////////// Buffer modification: ////////////
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
/////////////////// insert line: ////////////////////
/////////////////////////////////////////////////////

{"keys": [","], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

// same for org mode
{"keys": [","], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/org-mode-add-line.sublime-macro"},"context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selector", "operator": "equal", "operand": "text.org markup.heading", "match_all": true },
]
},

{"keys": ["ctrl+,"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line Before.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

/// insert space
{"keys": ["'"], "command": "insert", "args": {"characters": " "}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["'"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/replace_double_with_single.sublime-macro"},"context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "\"$", "match_all": true},
    {"key": "following_text", "operator": "not_regex_contains", "operand": "^\"", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "punctuation.definition.string.end", "match_all": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["'"], "command": "close", "context":
    [
        {  "key": "selector","operator": "equal", "operand": "text.find-in-files"}
    ]
},

{"keys": ["ctrl+`"], "command": "close", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

    { "keys": ["ctrl+f3"], "command": "find_under" },



{"keys": ["\""], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/replace_single_with_double.sublime-macro"},"context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "'$", "match_all": true},
    {"key": "following_text", "operator": "not_regex_contains", "operand": "^'", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "punctuation.definition.string.end", "match_all": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{ "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0}"}, "context":
[
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t|>|<|/| |\"|\\)|]|\\}|$)", "match_all": true }
]
},


{"keys": ["{"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/replace_paren_with_curly.sublime-macro"},"context":
    [
        {"key": "selection_empty", "operator": "equal", "operand": false},
// {"key": "following_text", "operator": "not_regex_contains", "operand": "^\"", "match_all": true},
{"key": "selector", "operator": "equal", "operand": "meta.brace.round", "match_all": true },
{"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["("], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/replace_paren_with_paren.sublime-macro"},"context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "selector", "operator": "equal", "operand": "punctuation.definition.block", "match_all": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


/////////////////////////////////////////////////////
/////////////////// SWAP LINES: /////////////////////
/////////////////////////////////////////////////////

{"keys": ["ctrl+c"], "command": "swap_line_up", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["ctrl+t"], "command": "swap_line_down", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},


{ "keys": ["ctrl+alt+t"], "command": "transpose" },


/////////////////////////////////////////////////////
//////// Assorted keybindings bound to ctrl: ////////
/////////////////////////////////////////////////////

{"keys": ["ctrl+enter"], "command": "insert", "args": {"characters": "\n"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},



// {"keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/insert_newline_with_selection.sublime-macro"},"context":
// [
//     {"key": "selection_empty", "operator": "equal", "operand": false },
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

{"keys": ["ctrl+shift+enter"], "command": "insert_snippet", "args": {"contents": "$0\n"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

// {"keys": ["ctrl+c"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/toggle_comment_after_duplicate_line.sublime-macro"},"context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

// {"keys": ["ctrl+c"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/duplicate_and_comment_with_selection.sublime-macro"},"context":
// [
//     {"key": "text", "operator": "regex_contains", "operand": "\n"},
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

// {"keys": ["ctrl+c"], "command": "duplicate_line", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "selector","operator": "equal", "operand": "comment"}
//     ]
// },

// {"keys": ["ctrl+g"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

// {"keys": ["ctrl+u"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/paste_above.sublime-macro"}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

////////////////////////////////////////////////////////////////
/////////////////// Delete left/right: //////////////////////
////////////////////////////////////////////////////////////////

{"keys": ["."], "command": "delete_word", "args": { "forward": false }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+."], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/delete_subword_backward.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["."], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/goto_opposite_end_of_selection.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false },
]
},

{"keys": ["."],  "command": "move", "args": {"by": "characters", "forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
// {"key": "text", "operator": "regex_match", "operand": "^\\S+.*|^\n.*"},
{"key": "text", "operator": "regex_match", "operand": "^\\S+.*"},
]
},

{"keys": ["p"], "command": "delete_word", "args": { "forward": true }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["ctrl+p"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/delete_subword_forward.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["p"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false },
]
},

{"keys": ["p"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/goto_end_of_selection.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false },
    {"key": "text", "operator": "regex_contains", "operand": "\n$"},
]
},

{ "keys": ["i"], "command": "move_to", "args": {"to": "eol", "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
]
},

{"keys": ["i"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/goto_soft_bol_and_select_to_end.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\s+", "match_all": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
]
},

{"keys": ["i"], "command": "join_lines", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": false},
    ]
},

{"keys": ["ctrl+i"], "command": "move_to", "args": {"to": "bol", "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true}
]
},

// {"keys": ["ctrl+shift+r"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/cut_to_eol.sublime-macro"},"context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true}
// ]
// },

{"keys": ["e"], "command": "right_delete", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

// {"keys": ["u"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/delete_after_select_paragraph.sublime-macro"},"context":
//   [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
//     {"key": "last_command", "operator": "not_equal", "operand": "run_macro_file" },
//     {"key": "text", "operator": "regex_contains", "operand": "\n$"},
//     {"key": "selection_empty", "operator": "equal", "operand": false },
//   ]
// },

/////////////////////////////////////////////////////
/////////////////// UNDO REDO: //////////////////////
/////////////////////////////////////////////////////

{"keys": ["y"], "command": "undo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

// {"keys": ["y"], "command": "soft_undo", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "last_command", "operator": "not_equal", "operand": "undo" },
//         {"key": "selection_empty", "operator": "equal", "operand": false },
//     ]
// },

// {"keys": ["y"], "command": "jump_back", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "last_command", "operator": "equal", "operand": "expand_selection" },
//         {"key": "selection_empty", "operator": "equal", "operand": false },
//     ]
// },

// {"keys": ["y"], "command": "jump_back", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "last_command", "operator": "equal", "operand": "jump_back" },
//         {"key": "selection_empty", "operator": "equal", "operand": false },
//     ]
// },

{"keys": ["ctrl+y"], "command": "redo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["ctrl+y"], "command": "undo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": false },
    ]
},

///////////////////////////////////////////////////
/////////////////// COMMENT: //////////////////////
///////////////////////////////////////////////////

{ "keys": [";"], "command": "toggle_comment", "args": { "block": false },"context":
[
   {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": [";"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/toggle_comment.sublime-macro"},"context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


// {"keys": [":"], "command": "insert", "args": {"characters": ";"}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

{"keys": [";"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/line_end_semicolon.sublime-macro"},"context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "for\\s?\\(", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "source.cs, source.tsx"},
]
},

{ "keys": [";"], "command": "move_to", "args": {"to": "hardeol", "extend": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "following_text", "operator": "regex_contains", "operand": ";$", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "source.cs, source.tsx"},
]
},

{"keys": [";"], "command": "set_setting", "args": {"setting": "block_caret", "value": true }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "preceding_text", "operator": "regex_contains", "operand": ";$", "match_all": true},
    {"key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "source"},
]
},

{"keys": [";"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/toggle_comment_multiple_cursors.sublime-macro"},"context":
[
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
    {"key": "setting.block_caret", "operator": "equal", "operand": true}, ]
},

{"keys": [";"], "command": "toggle_comment", "args": { "block": false }, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "following_text", "operator": "regex_match", "operand": "^$|^[a-z\\-_\\.\\(\\),]+$", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},
{"keys": [";"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/toggle_comment_when_has_selection.sublime-macro"},"context":
[
    {"key": "text", "operator": "not_regex_contains", "operand": "\n"},
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

/////////////////////////////////////////////////
/////////////////// CUT: //////////////////////
/////////////////////////////////////////////////

{"keys": ["q"], "command": "cut" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["q"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/cut_and_unselect_multiple_cursors.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
]
},

// cut whole line after search
{"keys": ["q"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/cut_line_and_unselect.sublime-macro"}, "context":
[
   {"key": "last_command", "operator": "equal", "operand": "" },
   {"key": "selection_empty", "operator": "equal", "operand": false },
   {"key": "setting.block_caret", "operator": "equal", "operand": true}
]
},

// cut whole line after search
{"keys": ["q"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/cut_line_and_unselect.sublime-macro"}, "context":
[
   {"key": "last_command", "operator": "equal", "operand": "find_next" },
   {"key": "selection_empty", "operator": "equal", "operand": false },
   {"key": "setting.block_caret", "operator": "equal", "operand": true}
]
},

{"keys": ["q"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"}, "context":
[
    {"key": "following_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true}
]
},

{"keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false },
    {"key": "setting.block_caret", "operator": "equal", "operand": true}
]
},

//////////////////////////////////////////////////
/////////////////// COPY: //////////////////////
//////////////////////////////////////////////////

{"keys": ["j"], "command": "copy", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["j"], "command": "noop", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true},
        {"key": "following_text", "operator": "regex_match", "operand": "^\\s*$"},
        {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$"},
    ]
},

{"keys": ["j"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/copy_and_unselect.sublime-macro"}, "context":
[
    {"key": "last_command", "operator": "not_equal", "operand": "expand_selection" },
    {"key": "last_command", "operator": "not_equal", "operand": "find_under_expand" },
    {"key": "selection_empty", "operator": "equal", "operand": false },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["j"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/copy_and_unselect_multiple_cursors.sublime-macro"}, "context":
[
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
    {"key": "selection_empty", "operator": "equal", "operand": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["j"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/copy_line_and_unselect.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "last_command", "operator": "equal", "operand": "" },
    {"key": "selection_empty", "operator": "equal", "operand": false },
]
},

{"keys": ["j"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/copy_line_and_unselect.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "last_command", "operator": "equal", "operand": "find_next" },
    {"key": "selection_empty", "operator": "equal", "operand": false },
]
},

{"keys": ["j"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/copy_in_find_in_files.sublime-macro"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": true },
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "^/"},
    {"key": "selector","operator": "equal", "operand": "text.find-in-files"}
]
},

//////////////////////////////////////////////////
/////////////////// PASTE: //////////////////////
//////////////////////////////////////////////////

{"keys": ["k"], "command": "paste_and_indent", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

// this macro tries to insert the clipboard contents between paragraphs, regardless of which way you came
{"keys": ["k"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/paste_after_move_by_paragraph.sublime-macro"}, "context":
[
    {"key": "following_text", "operator": "regex_match", "operand": "\\S+.*$"},
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$"},
    {"key": "last_modifying_command", "operator": "equal", "operand": "run_macro_file" },
    {"key": "last_command", "operator": "equal", "operand": "run_macro_file" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["k"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/paste_and_replace_multiple_cursors.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "selection_empty", "operator": "equal", "operand": true },
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
    {"key": "last_command", "operator": "equal", "operand": "select_lines" },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w$", "match_all": false},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\w", "match_all": false},
]
},

{"keys": ["k"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/paste_and_replace_multiple_cursors.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "selection_empty", "operator": "equal", "operand": true },
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
    {"key": "last_command", "operator": "equal", "operand": "select_lines" },
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "\\b$", "match_all": false},
    {"key": "following_text", "operator": "not_regex_contains", "operand": "^\\b", "match_all": false},
]
},

///////////////////////////////////////////////////
/////////////////// DUPLICATE: //////////////////////
///////////////////////////////////////////////////

{"keys": ["x"], "command": "duplicate_line", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["x"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/duplicate_after_search.sublime-macro"},"context":
[
    {"key": "last_command", "operator": "equal", "operand": "" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["x"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/duplicate_after_search.sublime-macro"},"context":
[
    {"key": "last_command", "operator": "equal", "operand": "find_next" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["x"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/duplicate_after_search.sublime-macro"},"context":
[
    {"key": "last_command", "operator": "equal", "operand": "hide_panel" },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["x"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/duplicate_with_multiple_cursors.sublime-macro"},"context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": true },
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
]
},

{"keys": ["x"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/duplicate_line_and_uncomment.sublime-macro"},"context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selector","operator": "equal", "operand": "comment"}
]
},


/////////////////////////////////////////////////////
/////////////////// SELECTIONS: /////////////////////
/////////////////////////////////////////////////////

/////////////////////////////////////////////////
/////////////////// EXPAND TO BRACKETS: /////////
/////////////////////////////////////////////////

{"keys": ["f"], "command": "expand_selection", "args": {"to": "brackets"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["d"], "command": "expand_selection", "args": {"to": "smart"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+d"], "command": "expand_selection", "args": {"to": "scope"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+o"], "command": "expand_selection", "args": {"to": "indentation"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+u"], "command": "expand_selection", "args": {"to": "tag"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    // {"key": "selector", "operator": "equal", "operand": "meta.tag" },
]
},

////////////////////////////////////////////////////
/////////////////// FIND_UNDER_EXPAND: ////////////////////
////////////////////////////////////////////////////

{"keys": ["n"], "command": "move", "args": {"by": "characters", "forward": true, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": true},
]
},



{"keys": ["ctrl+n"], "command": "find_all_under", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["n"], "command": "find_under_expand", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
},

{"keys": ["n"], "command": "find_under_expand", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selection_empty", "operator": "equal", "operand": true},
        {"key": "following_text", "operator": "regex_contains", "operand": "^\\w"},
    ]
},

{"keys": ["n"], "command": "find_under_expand", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selection_empty", "operator": "equal", "operand": true},
        {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w$"},
        {"key": "following_text", "operator": "regex_contains", "operand": "^\\s"},
    ]
},

{"keys": ["n"], "command": "find_under_expand", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selection_empty", "operator": "equal", "operand": true},
        {"key": "following_text", "operator": "regex_contains", "operand": "^$"},
    ]
},

// {"keys": ["n"], "command": "find_under_expand", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "selection_empty", "operator": "equal", "operand": false},
//         {"key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin, punctuation.definition.variable.job.shell, punctuation.definition.variable.shell" },
//     ]
// },

{"keys": ["n"], "command": "move", "args": {"by": "characters", "forward": true, "extend": true}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "preceding_text", "operator": "regex_contains", "operand": " $"},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\W"},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},




{"keys": ["n"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/goto_soft_bol_and_select_to_word.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\s+", "match_all": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
]
},


{"keys": ["ctrl+shift+n"], "command": "find_all_under" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

////////////////////////////////////////////////////
/////////////////// EXPAND WITH CONTROL: ////////////////////
////////////////////////////////////////////////////

// expand selection to paragraph
{"keys": ["b"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/select_paragraph.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

// expand selection to paragraph

// {"keys": ["ctrl+b"], "command": "move", "args": {"by": "stops", "empty_line": true, "forward": true, "extend": true}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true},
// ]
// },


// // expand selection to paragraph
// {"keys": ["ctrl+b"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/select_paragraph_backward.sublime-macro"}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },


{"keys": ["b"], "command": "move", "args": {"by": "stops", "empty_line": true, "forward": true, "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true},
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    {"key": "last_command", "operator": "not_equal", "operand": "" },
]
},


{"keys": ["ctrl+b"], "command": "move", "args": {"by": "stops", "empty_line": true, "forward": false, "extend": true}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true}
]
},

// multiple cursors
{"keys": ["w"], "command": "select_lines", "args": {"forward": true} , "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["w"], "command": "split_selection_into_lines", "context":
    [
        {"key": "selection_empty", "operator": "equal", "operand": false},
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "last_command", "operator": "not_equal", "operand": "find_next" },
    ]
},

{"keys": ["w"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/select_multiple_lines_with_preexisting_selection.sublime-macro"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "text", "operator": "not_regex_contains", "operand": "\n"},
    {"key": "last_command", "operator": "equal", "operand": "find_under_expand" },
]
},

{"keys": ["w"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/select_multiple_lines_with_preexisting_selection.sublime-macro"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "text", "operator": "not_regex_contains", "operand": "\n"},
    {"key": "last_command", "operator": "equal", "operand": "" },
]
},

{"keys": ["ctrl+w"], "command": "select_lines", "args": {"forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////// AUTO COMPLETION: ////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{"keys": ["shift+space"], "command": "auto_complete"},


// {"keys": ["ctrl+'"], "command": "move_to", "args": {"to": "bof", "extend": false}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true}
// ]
// },


{"keys": ["ctrl+'"], "command": "insert_snippet", "args": {"contents": " ${0:$SELECTION} "}, "context": 
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]},

{"keys": ["ctrl+'"], "command": "insert_snippet", "args": {"contents": "${0} "}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]},

{
    "command": "auto_complete_open_link",
    "keys": ["ctrl"],
    "context": [
        {
            "key": "auto_complete_visible",
            "operator": "equal",
            "operand": true
        }
    ]
},


{"keys": ["shift"], "command": "lsp_code_actions", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "setting.lsp_active"}
    ]
},

{ "keys" : ["alt+d"], "command" : "noop"},
{ "keys" : ["alt+c"], "command" : "noop"},
{ "keys" : ["alt"], "command" : "noop"},
{"keys": ["alt"], "command": "lsp_hover", "context":
    [
        {"key": "setting.lsp_active"},
    ]
},




{"keys": ["4"], "command": "goto_reference" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["4"], "command": "lsp_symbol_references" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "setting.lsp_active"},
    ]
},

{"keys": ["4"], "command": "org_mode_export_as_pdf" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selector", "operand": "text.org"},
    ]
},

{"keys": ["["], "command": "lsp_symbol_implementation" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selection_empty", "operator": "equal", "operand": true },
        {"key": "setting.lsp_active"},
    ]
},

{"keys": ["7"], "command": "goto_definition" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["7"], "command": "lsp_symbol_definition" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "setting.lsp_active"},
    ]
},

{"keys": ["ctrl+l"], "command": "lsp_symbol_rename" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "setting.lsp_active"},
    ]
},

{"keys": ["ctrl+alt+backspace"], "command": "reindent", "args": {"single_line": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+alt+backspace"], "command": "lsp_format_document" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "setting.lsp_active"},
    ]
},

// {"keys": ["ctrl+shift+backspace"], "command": "sort_selection", "args": {"case_sensitive": true}, "context":
{"keys": ["ctrl+shift+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/sortLineAlph.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
// {"key": "selection_empty", "operator": "equal", "operand": true },
// {"key": "preceding_text", "operator": "regex_match", "operand": "^import {.*$"},
// {"key": "following_text", "operator": "regex_contains", "operand": "}"},
// {"key": "num_selections", "operator": "not_equal", "operand": 1 },
]
},

{"keys": ["ctrl+shift+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/sort4realcase.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false },
]
},

{"keys": ["ctrl+shift+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/sort4realcase.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
]
},

{"keys": ["ctrl+alt+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/camelCase.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "num_selections", "operator": "not_equal", "operand": 1 },
// {"key": "selection_empty", "operator": "equal", "operand": true },
]
},

{ "keys": ["z"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["z"], "command": "lsp_document_symbols", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "lsp.session_with_capability", "operator": "equal", "operand": "documentSymbolProvider"} 
    ]
},





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////// HANDY KEYBINDINGS IF I AM IN INSERT MODE: //////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{"keys": ["ctrl+."], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/delete_subword_backward.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},


// {"keys": ["ctrl+p"], "command": "move_to", "args": { "to": "brackets" }, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

{"keys": ["ctrl+p"], "command": "delete_word", "args": { "forward": true }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

{"keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

{"keys": ["ctrl+q"], "command": "cut"},

{ "keys": ["ctrl+q"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["ctrl+j"], "command": "copy"},

{"keys": ["ctrl+k"], "command": "paste", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": false },
    ]
},

{"keys": ["ctrl+k"], "command": "paste_zsh", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["ctrl+c"], "command": "move", "args": {"by": "lines", "forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

{"keys": ["ctrl+t"], "command": "move", "args": {"by": "lines", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// ESCAPE: //////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




{"keys": ["escape"], "command": "show_diagnostics_nicely"},



{ "keys": ["escape"], "command": "hide_panel",
    "context":
    [
        {"key": "panel", "operand": "output.diagnostics"},
        {"key": "panel_visible", "operator": "equal", "operand": true }
    ]
},




{ "keys": ["escape"], "command": "hide_auto_complete", "context":
    [
        { "key": "auto_complete_visible", "operator": "equal", "operand": true }
    ]
},



{"keys": ["escape"], "command": "set_setting", "args": {"setting": "block_caret", "value": true }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},


{"keys": ["escape"], "command": "single_selection", "context":
    [
        {"key": "num_selections", "operator": "not_equal", "operand": 1 },
    ]
},


{"keys": ["escape"], "command": "clear_fields", "context":
    [
        {"key": "has_next_field", "operator": "equal", "operand": true}
    ]
},

{"keys": ["escape"], "command": "clear_fields", "context":
    [
        {"key": "has_prev_field", "operator": "equal", "operand": true}
    ]
},


{ "keys": ["escape"], "command": "hide_panel", "args": {"cancel": true},
"context":
[
    {"key": "panel", "operand": "replace"},
    { "key": "panel_visible", "operator": "equal", "operand": true }
]
},

{ "keys": ["escape"], "command": "hide_panel", "args": {"cancel": true},
"context":
[
    {"key": "panel", "operand": "find_in_files"},
    { "key": "panel_visible", "operator": "equal", "operand": true }
]
},

{ "keys": ["escape"], "command": "hide_panel", "args": {"cancel": true},
"context":
[
    {"key": "panel", "operand": "find"},
    { "key": "panel_visible", "operator": "equal", "operand": true }
]
},

{ "keys": ["escape"], "command": "hide_panel", "args": {"cancel": true},
"context":
[
    {"key": "panel", "operand": "output.exec"},
    { "key": "panel_visible", "operator": "equal", "operand": true }
]
},


{"keys": ["escape"], "command": "hide_overlay", "context":
    [
        {"key": "overlay_visible", "operator": "equal", "operand": true}
    ]
},

{"keys": ["escape"], "command": "hide_popup", "context":
    [
        {"key": "popup_visible", "operator": "equal", "operand": true}
    ]
},


{"keys": ["escape"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": false },
]
},


{"keys": ["escape"], "command": "soft_undo", "context":
   [
       {"key": "setting.block_caret", "operator": "equal", "operand": true },
       {"key": "last_command", "operator": "equal", "operand": "run_macro_file" },
       {"key": "last_modifying_command", "operator": "not_equal", "operand": "run_macro_file" },
       {"key": "selection_empty", "operator": "equal", "operand": false },
   ]
},

// used for jumping back after selecting text
{"keys": ["escape"], "command": "soft_undo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "last_command", "operator": "equal", "operand": "move_to" },
        {"key": "selection_empty", "operator": "equal", "operand": false },
    ]
},

// used for jumping back after selecting text
{"keys": ["escape"], "command": "soft_undo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "last_command", "operator": "equal", "operand": "find_under_expand" },
        {"key": "selection_empty", "operator": "equal", "operand": false },
    ]
},


// used for jumping back after selecting text
{"keys": ["escape"], "command": "soft_undo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "last_command", "operator": "equal", "operand": "expand_selection" },
        {"key": "selection_empty", "operator": "equal", "operand": false },
    ]
},

// used for jumping back after selecting text
{"keys": ["escape"], "command": "soft_undo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "last_command", "operator": "equal", "operand": "select_all" },
        {"key": "selection_empty", "operator": "equal", "operand": false },
    ]
},


// // used for jumping back after go to def
// {"keys": ["escape"], "command": "jump_back", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "last_command", "operator": "equal", "operand": "" },
//         {"key": "selection_empty", "operator": "equal", "operand": true },
//     ]
// },

{"keys": ["escape"], "command": "set_setting", "args": {"setting": "block_caret", "value": true }, "context":
[
    {"key": "overlay_visible", "operator": "equal", "operand": false },
    {"key" : "panel_has_focus", "operator": "equal", "operand": false },
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

// {"keys": ["escape"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
//     {"key": "text", "operator": "regex_match", "operand": "."},
//     {"key": "selection_empty", "operator": "equal", "operand": false },
// ]
// },


{ "keys": ["escape"], "command": "focus_neighboring_group", "context":
    [
        {"key": "panel", "operand": "console"}, {"key": "panel_has_focus"}
    ]
},


{"keys": ["ctrl+alt+4"], "command": "set_setting", "args": {"setting": "tab_size", "value": 4 }
},

{"keys": ["ctrl+alt+2"], "command": "set_setting", "args": {"setting": "tab_size", "value": 2 }
},




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// Tab-keybindings: //////////////////////
/// this is used for various auto completion such as closing of tags
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{"keys": ["tab"], "command": "auto_complete"},

{"keys": ["tab"], "command": "indent", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": false },
        {"key": "preceding_text", "operator": "regex_contains", "operand": "\\s$"},
        {"key": "last_command", "operator": "equal", "operand": "reindent" },
    ]
},

{"keys": ["tab"], "command": "indent", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": false },
        {"key": "preceding_text", "operator": "regex_contains", "operand": "\\s$"},
        {"key": "last_command", "operator": "equal", "operand": "indent" },
    ]
},

{"keys": ["tab"], "command": "close_tag", "args": { "insert_slash": true }, "context":
[
    // {"key": "selector", "operator": "equal", "operand": "meta.tag", "match_all": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "preceding_text", "operator": "not_regex_match", "operand": "^$"},
    {"key": "following_text", "operator": "regex_match", "operand": "^\\s*$"},
]
},

{"keys": ["tab"], "command": "close_tag", "args": { "insert_slash": true }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    // {"key": "selector", "operator": "equal", "operand": "meta.tag", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "<.+>"},
    {"key": "following_text", "operator": "regex_match", "operand": "^$"},
]
},

// we fallback to moving forward if no other options are available. useful for parentheses.
{"keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    {"key": "following_text", "operator": "not_regex_contains", "operand": "^[a-zA-Z_\\-]|^$"},
]
},

// insert higher order function arrow
{"keys": ["tab"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/arrow_function.sublime-macro"}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w+\\(\\($"},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\)"}
]
},

{"keys": ["tab"], "command": "insert", "args": {"characters": "=> "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": ".(\\w+)\\(\\w+ $"},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\)"}
]
},

{"keys": ["tab"], "command": "insert", "args": {"characters": " => "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\(\\)$"},
]
},

{"keys": ["tab"], "command": "insert", "args": {"characters": " => "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "meta.block", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\{e$"},
    {"key": "following_text", "operator": "regex_contains", "operand": "^}"},
]
},

// indent rules -- these are the only ones with block_caret: true
{"keys": ["tab"], "command": "indent", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w"},
    ]
},

{"keys": ["tab"], "command": "indent", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "following_text", "operator": "regex_contains", "operand": "\\w"},
    ]
},

{"keys": ["tab"], "command": "insert", "args": {"characters": ">"}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "meta.tag.attributes", "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "<.*\\w+\"?$"},
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": ">$"},
    {"key": "following_text", "operator": "not_regex_match", "operand": "^)|^}"},
]
},

{"keys": ["tab"], "command": "insert_snippet", "args": {"contents": "=\"$0\">"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "(htmlFor|className|scope)$"},
    {"key": "selector", "operator": "equal", "operand": "meta.tag.attributes", "match_all": true },
    {"key": "following_text", "operator": "not_regex_contains", "operand": ">$"}
]
},

{"keys": ["tab"], "command": "insert_snippet", "args": {"contents": "=\"$0\""}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "(htmlFor|className|scope)$"},
    {"key": "selector", "operator": "equal", "operand": "meta.tag", "match_all": true },
    {"key": "following_text", "operator": "regex_contains", "operand": ">"},
]
},

{"keys": ["tab"], "command": "reindent", "context":
    [
        {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$"},
        {"key": "last_command", "operator": "not_equal", "operand": "reindent" },
        {"key": "last_command", "operator": "not_equal", "operand": "indent" },
    ]
},

//default keybindings that should always have first priority
{ "keys": ["tab"], "command": "expand_snippet", "context":
    [{ "key": "has_snippet" }]
},

{ "keys": ["tab"], "command": "next_field", "context":
    [{ "key": "has_next_field", "operator": "equal", "operand": true }]
},

{ "keys": ["tab"], "command": "commit_completion", "context":
    [{ "key": "auto_complete_visible" }]
},

{"keys": ["tab"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/move_two_left.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\(\\);$"},
]
},

// overlay or find
{"keys": ["tab"], "command": "move", "args": {"by": "lines", "forward": true}, "context":
[
    { "key": "overlay_has_focus", "operator": "equal", "operand": true },
    {"key": "overlay_visible", "operator": "equal", "operand": true },
]
},

// overlay or find
{"keys": ["tab"], "command": "move", "args": {"by": "lines", "forward": true}, "context":
[
    {"key": "panel_has_focus"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
]
},

{"keys": ["tab"], "command": "toggle_regex", "context":
    [
       {"key": "panel_has_focus", "operator": "equal", "operand": true },
       {"key": "setting.is_widget", "operator": "equal", "operand": true}
   ]
},

{"keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false },
    {"key": "panel", "operand": "find"}, {"key": "panel_has_focus"},
]
},

{"keys": ["tab"], "command": "insert", "args": {"characters": ">"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "<(div|h5|span)$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

///////////////////////////////////////////////////////
//////////// INSERT SNIPPETS WITH ENTER: //////////////
///////////////////////////////////////////////////////

{"keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/div-exp.sublime-macro"}, "context":
[
    {"key": "following_text", "operator": "regex_match", "operand": "^\">$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

{"keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/div-exp.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^\\s+<\\w+>\\s?$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// OVERLAY: //////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{"keys": [" "], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
,},

{"keys": [" "], "command": "insert", "args": {"characters": " "}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

{"keys": [" "], "command": "delete_word", "args": { "forward": false }, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "@"},
]
},

{"keys": [" "], "command": "insert", "args": {"characters": "@"}, "context":
[
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "@$|#$"},
    { "key": "goto_anything:input" },
// { "key": "command_palette:input" },
{"key": "overlay_visible", "operator": "equal", "operand": true },
]
},

{"keys": [" "], "command": "insert", "args": {"characters": ":"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": ":[0-9]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
]
},

{"keys": ["ctrl+e"], "command": "show_overlay", "args": {"overlay": "command_palette"} },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// Miscellaneous: //////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{"keys": ["h"], "command": "set_setting", "args": {"setting": "block_caret", "value": false }, "context":
[
    {"key": "panel_has_focus", "operator": "equal", "operand": false },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["h"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/multiple_cursors_from_selection.sublime-macro"}, "context":
[
    {"key": "text", "operator": "regex_contains", "operand": "\n"},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


// {"keys": ["ctrl+n"], "command": "move", "args": {"by": "characters", "forward": true, "extend": true}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

// // this command is intended to be run after a search to mark the whole word
// {"keys": ["ctrl+h"], "command": "expand_selection", "args": {"to": "word"}, "context":
// [
//     {"key": "selection_empty", "operator": "equal", "operand": false },
//     // {"key": "last_command", "operator": "equal", "operand": "" },
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },


{"keys": ["ctrl+h"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/multiple_cursors_from_indentation.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": true},
]
},


{"keys": ["ctrl+h"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/multiple_cursors_from_selection_END.sublime-macro"}, "context":
[
    {"key": "text", "operator": "regex_contains", "operand": "\n"},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["v"], "command": "focus_neighboring_group", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},




{"keys": ["ctrl+v"], "command": "focus_neighboring_group", "args": {"forward": false}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},




{ "keys": ["ctrl+f"], "command": "move_to", "args": {"to": "brackets", "extend": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{"keys": ["/"], "command": "goto_symbol_in_project" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["ctrl+/"], "command": "lsp_workspace_symbols" , "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

// {"keys": ["alt+space"], "command": "run_alacritty"},

// {"keys": ["ctrl+alt+p"], "command": "sublime_project"},
// {"keys": ["ctrl+tab"], "command": "focus_next"},


{"keys": ["ctrl+8"], "command": "open_todo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true}
    ]
},

{"keys": ["ctrl+9"], "command": "run_dos_to_unix", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true }
    ]
},

{"keys": ["insert"], "command": "paste", "args": {"clipboard": "selection"} },

{"keys": ["f12"], "command": "paste", "args": {"clipboard": "selection"} },

// {"keys": ["ctrl+s"], "command": "move_to", "args": {"to": "eof", "extend": false}, "context":
{"keys": ["ctrl+s"], "command": "move", "args": {"by": "pages", "forward": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

// {"keys": ["ctrl+s"], "command": "move_to", "args": {"to": "eof", "extend": false}, "context":
// {"keys": ["ctrl+d"], "command": "move", "args": {"by": "pages", "forward": false}, "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

// navigate side bar
{"keys": ["o"], "command": "move", "args": {"by": "characters", "forward": false}, "context":
[ {"key": "control", "operand": "sidebar_tree"} ] },
{"keys": ["t"], "command": "move", "args": {"by": "lines", "forward": true}, "context":
[ {"key": "control", "operand": "sidebar_tree"} ] },
{"keys": ["c"], "command": "move", "args": {"by": "lines", "forward": false}, "context":
[ {"key": "control", "operand": "sidebar_tree"} ] },
{"keys": ["u"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[ {"key": "control", "operand": "sidebar_tree"} ] },

{ "keys": ["ctrl+escape"], "command": "toggle_side_bar" },

{ "keys": ["ctrl+shift+k"], "command": "exec", "args": {"kill": true} },

{ "keys" : ["ctrl+-"], "command" : "show_panel" , "args" : {"panel": "output.exec"}},

{"keys": ["ctrl+-"], "command": "hide_panel", "args": {"cancel": true}, "context":
[
    {"key": "panel", "operand": "output.exec"},
    {"key": "panel_visible", "operator": "equal", "operand": true}
]
},

// { "keys" : ["ctrl+b"], "command" : "sublime_merge_blame_file", "context":
//     [
//         {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//     ]
// },

{ "keys" : ["ctrl+x"], "command" : "sublime_merge_open_repo", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    ]
},


// {"keys": ["ctrl+x"], "command": "duplicate_line", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//     ]
// },


{ "keys" : ["ctrl+shift+b"], "command" : "noop"},

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// THe number row is not used in command mode, so we can use it for all sorts off cool stuff //////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Git commands
{"keys": ["8"], "command": "next_modification", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["ctrl+8"], "command": "prev_modification", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["9"], "command": "toggle_inline_diff", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["0"], "command": "revert_hunk", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["0"], "command": "revert_modification", "context":
    [
        {"key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["5"], "command": "close_pane", "context":
    [
        {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["6"], "command": "new_pane", "args": {"move": true}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["3"], "command": "save", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["3"], "command": "build_with_sass", "context":
    [
        {"key": "selector", "operator": "equal", "operand": "source.scss"},
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["3"], "command": "build_with_latex", "context":
    [
        {"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

{"keys": ["3"], "command": "lsp_save", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "lsp.session_with_capability", "operator": "equal", "operand": "textDocumentSync.willSave | textDocumentSync.willSaveWaitUntil | codeActionProvider.codeActionKinds | documentFormattingProvider | documentRangeFormattingProvider"}
    ]
},

{"keys": ["3"], "command": "lsp_save_with_time_out", "context":
    [
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
        {"key": "lsp.session_with_capability", "operator": "equal", "operand": "textDocumentSync.willSave | textDocumentSync.willSaveWaitUntil | codeActionProvider.codeActionKinds | documentFormattingProvider | documentRangeFormattingProvider"}
    ]
},


// {"keys": ["3"], "command": "lsp_save_and_maybe_hide_panel", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "panel", "operand": "output.diagnostics"},
//         {"key": "panel_visible", "operator": "equal", "operand": true },
//         {"key": "lsp.session_with_capability", "operator": "equal", "operand": "textDocumentSync.willSave | textDocumentSync.willSaveWaitUntil | codeActionProvider.codeActionKinds | documentFormattingProvider | documentRangeFormattingProvider"}
//     ]
// },

{"keys": ["!"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/insert_important_css.sublime-macro"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "preceding_text", "operator": "regex_contains", "operand": ";$"},
    {"key": "selector", "operator": "equal", "operand": "source.css, source.scss"},
]
},

// {"keys": ["2"], "command": "toggle_bookmark", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//     ]
// },

// {"keys": ["3"], "command": "next_bookmark", "context":
//     [
//         {"key": "setting.block_caret", "operator": "equal", "operand": true },
//         {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//     ]
// },

/////////////////////////
// Boring keybindings //
////////////////////////

// if we are in overlay we can infer that typing numbers will always refer to line numbers. This of course only applies if your files are not named with numbers

{"keys": ["1"], "command": "insert", "args": {"characters": ":1"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["2"], "command": "insert", "args": {"characters": ":2"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["3"], "command": "insert", "args": {"characters": ":3"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["4"], "command": "insert", "args": {"characters": ":4"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["5"], "command": "insert", "args": {"characters": ":5"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["6"], "command": "insert", "args": {"characters": ":6"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["7"], "command": "insert", "args": {"characters": ":7"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["8"], "command": "insert", "args": {"characters": ":8"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

{"keys": ["9"], "command": "insert", "args": {"characters": ":9"}, "context":
[
    {"key": "preceding_text", "operator": "regex_match", "operand": "^$|^[A-Za-z\\-_\\.\\(\\),]+$"},
    {"key": "overlay_visible", "operator": "equal", "operand": true },
    { "key": "goto_anything:input" },
]
},

// a little help with Typescript
{"keys": ["=", "="], "command": "insert", "args": {"characters": "=== "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["=", "="], "command": "insert", "args": {"characters": "==="}, "context":
[
    {"key": "following_text", "operator": "regex_contains", "operand": "^ ", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["!", "="], "command": "insert", "args": {"characters": "!== "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["=", "="], "command": "insert", "args": {"characters": "== "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["="], "command": "insert", "args": {"characters": "== "}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "if\\(.*\\s", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["="], "command": "insert", "args": {"characters": " == "}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "if\\(.*\\S", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["!", "="], "command": "insert", "args": {"characters": "!= "}, "context":
[
    {"key": "selector", "operator": "equal", "operand": "source.cs"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

{"keys": ["!", "="], "command": "insert", "args": {"characters": "!=="}, "context":
[
    {"key": "following_text", "operator": "regex_contains", "operand": "^ ", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "source.tsx"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false }
]
},

////////////////////////// nop

{"keys": ["h"], "command": "noop", "context":
    [
        {  "key": "selector","operator": "equal", "operand": "text.find-in-files"}
    ]
},

{"keys": ["h"], "command": "noop", "context":
    [
        {"key": "panel", "operand": "output.exec"},
        {"key": "panel_has_focus", "operator": "equal", "operand": true },
    ]
},

// // Auto-pair quotes
// {"keys": ["<"], "command": "insert_snippet", "args": {"contents": "<$0>"}, "context":
// [
//     {"key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
//     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//     {"key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
//     {"key": "preceding_text", "operator": "not_regex_contains", "operand": "[<a-zA-Z0-9_]$", "match_all": true },
//     {"key": "selector", "operator": "equal", "operand": "meta.return.type", "match_all": true },
// ]
// },

// {"keys": ["<"], "command": "insert_snippet", "args": {"contents": "$0<$SELECTION>"}, "context":
// [
//     {"key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
//     {"key": "selection_empty", "operator": "equal", "operand": false, "match_all": true}
// ]
// },

// {"keys": [">"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
// [
//     {"key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
//     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//     {"key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true },
//     {"key": "selector", "operator": "equal", "operand": "meta.return.type", "match_all": true },
// ]
// },

{"keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
[
    {"key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    {"key": "preceding_text", "operator": "regex_contains", "operand": "<$", "match_all": true },
    {"key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true },
    {"key": "selector", "operator": "equal", "operand": "meta.return.type", "match_all": true },
]
},

// Auto-pair backticks
{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0`"}, "context":
[
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
    { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[`a-zA-Z0-9_]$", "match_all": true },
// { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
]
},
{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context":
[
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
]
},
{ "keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
// { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
// { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
]
},
{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
[
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
    { "key": "selector", "operator": "not_equal", "operand": "string.template", "match_all": true },
// { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
]
},


{"keys": ["`"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/replace_double_with_backtick.sublime-macro"},"context":
[
    {"key": "selection_empty", "operator": "equal", "operand": false},
    {"key": "preceding_text", "operator": "not_regex_contains", "operand": "\"$", "match_all": true},
    {"key": "following_text", "operator": "not_regex_contains", "operand": "^\"", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "punctuation.definition.string.end", "match_all": true },
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},


{ "keys": ["`"], "command": "next_view_in_stack", "context":
    [
    // {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{ "keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
[
    { "key": "auto_complete_visible", "operator": "equal", "operand": true },
    {"key": "following_text", "operator": "regex_contains", "operand": "^", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

// { "keys": ["`"], "command": "next_view_in_stack", "context":

    {"keys": ["<"], "command": "insert", "args": {"characters": ","}, "context":
    [
    // {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},



{ "keys": ["ctrl+s"], "command": "next_view", "context":
    [
        {"key": "setting.block_caret", "operator": "equal", "operand": true },
    ]
},

// { "keys": ["ctrl+h"], "command": "prev_view", "context":
// [
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },



{ "keys": ["ctrl++"], "command": "noop" },
{ "keys": ["ctrl+="], "command": "noop" },
{ "keys": ["ctrl+-"], "command": "noop" },




// {"keys": ["escape", "m"], "command": "show_panel", "args": {"panel": "find_in_files"}, "context":
// [
//     {"key": "selection_empty", "operator": "equal", "operand": true},
//     {"key": "setting.block_caret", "operator": "equal", "operand": true },
// ]
// },

// { "keys": ["alt+c"], "command": "move", "args": {"by": "pages", "forward": false} },
// { "keys": ["alt+t"], "command": "move", "args": {"by": "pages", "forward": true} },

{ "keys": ["alt+c"], "command": "move_to", "args": {"to": "bof", "extend": false} },
{ "keys": ["alt+t"], "command": "move_to", "args": {"to": "eof", "extend": false} },


{
    "keys": ["tab"],
    "command": "zorg_cycle",
    "context": [{
        "key": "selector",
        "operand": "markup.heading & text.org"
    }]
},

{
    "keys": ["tab"],
    "command": "orgmode_toggle_fold_links",
    "context": [{
        "key": "selector",
        "operand": "link.text.org"
    }]
},

{
    "keys": ["tab"], "command": "add_date", "context":
    [
        {"key": "preceding_text", "operator": "regex_contains", "operand": "dt$", "match_all": true},
        {"key": "selector", "operand": "text.org"}
    ]
},



{
    "keys": ["ctrl+c"],
    "command": "zorg_move_node_up",
    "context": [{
        "key": "selector",
        "operand": "markup.heading & text.org"
    }]
},
{
    "keys": ["ctrl+c"],
    "command": "zorg_move_node_up",
    "context": [{
        "key": "selector",
        "operand": "entry.list.text.org"
    }]
},
{
    "keys": ["ctrl+t"],
    "command": "zorg_move_node_down",
    "context": [{
        "key": "selector",
        "operand": "markup.heading & text.org"
    }]
},
{
    "keys": ["ctrl+t"],
    "command": "zorg_move_node_down",
    "context": [{
        "key": "selector",
        "operand": "entry.list.text.org"
    }]
},



{
    "keys": ["enter"],
    "command": "zorg_follow_link",
    "context": [
        {
            "key": "selector",
            "operator": "equal",
            "operand": "link.text.org"
        },
        {
            "key": "preceding_text",
            "operator": "not_regex_contains",
            "operand": "]]$"
        },
        {
            "key": "following_text",
            "operator": "not_regex_contains",
            "operand": "^\\[\\["
        },
    ]
},



{"keys": ["enter"], "command": "insert_snippet", "args": {"contents": "\n- $0"}, "context":
[
    {"key": "selector", "operand": "markup.list.unnumbered.text.org"},
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w$", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

{"keys": ["enter"], "command": "add_list_entry", "context":
    [
        {"key": "selector", "operand": "markup.list.numbered.text.org"},
        {"key": "preceding_text", "operator": "regex_contains", "operand": "\\w$", "match_all": true},
        {"key": "setting.block_caret", "operator": "equal", "operand": false },
    ]
},

{"keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/delete_line_and_line.sublime-macro"}, "context":
[
    {"key": "selector", "operand": "markup.list.unnumbered.text.org|markup.list.numbered.text.org"},
    {"key": "preceding_text", "operator": "regex_match", "operand": "^(-|\\d\\.) $", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

// { "keys": ["ctrl+enter"], "command": "add_list_entry"},

{
    "keys": ["enter"],
    "command": "zorg_follow_link",
    "context": [
        {
            "key": "selector",
            "operator": "equal",
            "operand": "link.text.org"
        },
        {
            "key": "preceding_text",
            "operator": "not_regex_contains",
            "operand": "]]$"
        },
        {
            "key": "following_text",
            "operator": "not_regex_contains",
            "operand": "^\\[\\["
        },
    ]
},



{
    "keys": ["alt+shift+right"],
    "command": "zorg_toggle_checkbox",
    "context": [{
        "key": "selector",
        "operand": "text.org"
    }]
},



{
    "keys": ["ctrl+u"],
    "command": "zorg_cycle_todo_state_forward",
    "context": [{
        "key": "selector",
        "operand": "markup.heading & text.org"
    }]
},
{
    "keys": ["ctrl+o"],
    "command": "zorg_cycle_todo_state_backward",
    "context": [{
        "key": "selector",
        "operand": "markup.heading & text.org"
    }]
},


{"keys": [" "], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/capital-beginning.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "((\\.|\\?) |^|astri|troel|linu|ethereu|bitcoi)\\w+$"},
    // {"key": "following_text", "operator": "regex_contains", "operand": "^[^\\w])", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},

{"keys": [" "], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/capital-beginning-with-comma.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "((\\.|\\?) |^|astri|troel|linu|ethereu|bitcoi)\\w+[[:punct:]]$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},


{"keys": [" "], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/capital-i.sublime-macro"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "(.* |^)i$"},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "setting.english", "operator": "equal", "operand": true },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},

{ "keys": ["alt+u"], "command": "increment", "context":
    [
        {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
},

{ "keys": ["alt+o"], "command": "decrement", "context":
    [
        {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
},


{"keys": ["alt+u"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/increment_number_under_cursor.sublime-macro"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{"keys": ["alt+o"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/decrement_number_under_cursor.sublime-macro"}, "context":
[
    {"key": "selection_empty", "operator": "equal", "operand": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": true },
]
},

{ "keys": ["ctrl+shift+o"], "command": "lower_case" },
{ "keys": ["ctrl+shift+u"], "command": "upper_case" },



{"keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$\"$0\""}, "context":
[
    {"key": "selector", "operand": "source.cs"},
    {"key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true},
    {"key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true},
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
]
},

// { "keys": ["ctrl+shift+t"], "command": "build" },

{ "keys": ["ctrl+shift+t"], "command": "build", "args": {"build_system": "Packages/User/csharp.sublime-build", "variant": "thistestonly", "choice_build_system": true, "choice_variant": true }
},




{"keys": ["o", "e"], "command": "insert", "args": {"characters": "ø"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "setting.english", "operator": "equal", "operand": false },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},

{"keys": ["a", "e"], "command": "insert", "args": {"characters": "æ"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "setting.english", "operator": "equal", "operand": false },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},

{"keys": ["a", "a"], "command": "insert", "args": {"characters": "å"}, "context":
[
    {"key": "setting.block_caret", "operator": "equal", "operand": false },
    {"key": "setting.english", "operator": "equal", "operand": false },
    {"key": "selector", "operator": "equal", "operand": "text", "match_all": true },
    {"key": "setting.is_widget", "operator": "equal", "operand": false}
]
},





// if and for loop snippet insertion
{ "keys": ["("], "command": "insert_snippet", "args": {"contents": "($0) {\n}"}, "context":
[
    {"key": "preceding_text", "operator": "regex_contains", "operand": "(if|for|while)\\s?$", "match_all": true},
    {"key": "selector", "operator": "equal", "operand": "source.cs, source.tsx"},
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }
]
},


{ "keys": ["ctrl+tab"], "command": "next_view" },
{ "keys": ["ctrl+shift+tab"], "command": "prev_view" },




    // {"keys": ["enter"], "command": "find_in_files_goto", "context":
    //     [
    //     { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    //         // {  "key": "selector","operator": "equal", "operand": "text.find-in-files"}
    //     ]
    // },



    { "keys": ["ctrl+enter"], "command": "find_next", "args": {"close_panel": true},
    "context": [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
    },



]
